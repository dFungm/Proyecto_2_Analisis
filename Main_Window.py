# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Window.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys, math, random
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from Proyecto_2_Analisis import Thread

class Ui_MainWindow(QWidget):

    def __init__(self):
        super().__init__()
        self.rotationVar = 70
        self.MainWindow = QMainWindow()
        self.winW = 500
        self.winH = 500
        self.rayosSec = 2 #random.randint(0, 10)
        self.energiaInicial = 1000
        self.rayosTotales = 0
        # angulos = [(20, 160), (200, 330), (290, 430), (70, 250)]
        self.rangoAngulo = [(20, 140), (200, 130), (290, 140), (70, 185)]
        # Arriba - Abajo - Izquierda - Derecha
        self.initUI()
        self.setupUi()

    def initUI(self):
        self.MainWindow.setObjectName("MainWindow")
        self.MainWindow.setGeometry(100, 50, self.winW, self.winH+50)
        self.MainWindow.setMaximumSize(QtCore.QSize(self.winW, self.winH+50))
        self.MainWindow.show()

        self.centralwidget = QtWidgets.QWidget(self.MainWindow)

        self.lbl = QtWidgets.QLabel(self.centralwidget)
        self.lbl.resize(self.winW, self.winH)
        pixmap = QPixmap(self.winW, self.winH)
        self.lbl.setPixmap(pixmap)

        self.MainWindow.setCentralWidget(self.centralwidget)

    def setupUi(self):
        self.echo = QPixmap('imgs/Echo.png')
        self.barra = QPixmap('imgs/Espejo.png')
        self.barral = QPixmap('imgs/Espejo_l.png')
        self.barrahori = QPixmap('imgs/Espejo_dash.png')

        transform_1 = QtGui.QTransform()
        transform_1.rotate(45)
        transform_2 = QtGui.QTransform()
        transform_2.rotate(90)
        transform_3 = QtGui.QTransform()
        transform_3.rotate(180)
        transform_4 = QtGui.QTransform()
        transform_4.rotate(225)

        self.rotated_pixmap1 = self.barra.transformed(transform_1)
        self.rotated_pixmap2 = self.barra.transformed(transform_2)
        self.rotated_pixmap3 = self.barral.transformed(transform_3)
        self.rotated_pixmap4 = self.barrahori.transformed(transform_2)

        self.Button = QtWidgets.QPushButton("Rotar", self.centralwidget)
        self.Button.setGeometry(QtCore.QRect(0, 0, 60, 20))
        self.Button.clicked.connect(self.rotation)

        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(210, 210, 47, 13))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(470, 210, 47, 13))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(210, 70, 47, 13))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(60, 140, 47, 13))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(130, 320, 47, 13))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(390, 40, 47, 13))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(370, 380, 47, 13))
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(124, 237, 47, 13))
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(405, 82, 47, 13))
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(142, 60, 47, 13))
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(459, 133, 47, 13))
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(264, 54, 47, 13))
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(252, 398, 47, 13))
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(131, 206, 47, 13))
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(155, 395, 47, 13))

        self.MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(self.MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 500, 21))
        self.menubar.setObjectName("menubar")
        self.MainWindow.setMenuBar(self.menubar)

        self.menuEcho_Locator = QtWidgets.QMenu(self.menubar)
        self.menuEcho_Locator.setObjectName("menuEcho_Locator")

        self.statusbar = QtWidgets.QStatusBar(self.MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.MainWindow.setStatusBar(self.statusbar)

        self.menubar.addAction(self.menuEcho_Locator.menuAction())

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self.MainWindow)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.MainWindow.setWindowTitle(_translate("MainWindow", "Proyecto 2"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.label_2.setText(_translate("MainWindow", "TextLabel"))
        self.label_3.setText(_translate("MainWindow", "TextLabel"))
        self.label_4.setText(_translate("MainWindow", "TextLabel"))
        self.label_5.setText(_translate("MainWindow", "TextLabel"))
        self.label_6.setText(_translate("MainWindow", "TextLabel"))
        self.label_7.setText(_translate("MainWindow", "TextLabel"))
        self.label_8.setText(_translate("MainWindow", "TextLabel"))
        self.label_9.setText(_translate("MainWindow", "TextLabel"))
        self.label_10.setText(_translate("MainWindow", "TextLabel"))
        self.label_11.setText(_translate("MainWindow", "TextLabel"))
        self.label_12.setText(_translate("MainWindow", "TextLabel"))
        self.label_13.setText(_translate("MainWindow", "TextLabel"))
        self.label_14.setText(_translate("MainWindow", "TextLabel"))
        self.label_15.setText(_translate("MainWindow", "TextLabel"))

        self.label.setPixmap(self.echo)
        self.label.resize(self.echo.width(), self.echo.height())

        self.label_2.setPixmap(self.rotated_pixmap3)
        self.label_2.resize(self.rotated_pixmap3.width(), self.rotated_pixmap3.height())

        self.label_3.setPixmap(self.rotated_pixmap2)
        self.label_3.resize(self.rotated_pixmap2.width(), self.rotated_pixmap2.height())

        self.label_4.setPixmap(self.rotated_pixmap4)
        self.label_4.resize(self.rotated_pixmap4.width(), self.rotated_pixmap4.height())

        self.label_5.setPixmap(self.barral)
        self.label_5.resize(self.barral.width(), self.barral.height())

        self.label_6.setPixmap(self.rotated_pixmap3)
        self.label_6.resize(self.rotated_pixmap3.width(), self.rotated_pixmap3.height())

        self.label_7.setPixmap(self.barra)
        self.label_7.resize(self.barra.width(), self.barra.height())

        self.label_8.setPixmap(self.barra)
        self.label_8.resize(self.barra.width(), self.barra.height())

        self.label_9.setPixmap(self.rotated_pixmap2)
        self.label_9.resize(self.rotated_pixmap2.width(), self.rotated_pixmap2.height())

        self.label_10.setPixmap(self.rotated_pixmap2)
        self.label_10.resize(self.rotated_pixmap2.width(), self.rotated_pixmap2.height())

        self.label_11.setPixmap(self.barrahori)
        self.label_11.resize(self.barrahori.width(), self.barrahori.height())

        self.label_12.setPixmap(self.barrahori)
        self.label_12.resize(self.barrahori.width(), self.barrahori.height())

        self.label_13.setPixmap(self.barrahori)
        self.label_13.resize(self.barrahori.width(), self.barrahori.height())

        self.label_14.setPixmap(self.rotated_pixmap4)
        self.label_14.resize(self.rotated_pixmap4.width(), self.rotated_pixmap4.height())

        self.label_15.setPixmap(self.rotated_pixmap3)
        self.label_15.resize(self.rotated_pixmap3.width(), self.rotated_pixmap3.height())

        #pixmap 4 = /
        #pixmap 2 = |
        #pixmap 3 = L

        self.Muros = [self.label_3, self.label_7, self.label_8, self.label_10, self.label_9]
        self.MurosL = [self.label_2, self.label_6, self.label_5, self.label_15]
        self.MurosDash = [self.label_4, self.label_12, self.label_13, self.label_14, self.label_11]
        self.MurosCoords = []

        pixMap = QPixmap(self.label_7.width(), self.label_7.height())
        self.label_7.render(pixMap)
        imageSource = pixMap.toImage()
        self.color = imageSource.pixelColor(0, 0)

        for muro in self.Muros:
            self.coordenadaMuro(muro)
            #muro.hide()
        for muro in self.MurosL:
            self.coordenadaMuro(muro)
            #muro.hide()
        for muro in self.MurosDash:
            self.coordenadaMuro(muro)
            #muro.hide()

        self.menuEcho_Locator.setTitle(_translate("MainWindow", "Echo Locator"))
        self.rotX = self.label.x() + 30
        self.roty = self.label.y() + 13

    def rotation(self):
        if self.rotationVar == 355:
            self.rotationVar = 0
        else:
            self.rotationVar += 5
        transform = QtGui.QTransform()
        transform.rotate(self.rotationVar)
        rotated = self.echo.transformed(transform)
        self.label.setPixmap(rotated)
        self.label.resize(rotated.width(), rotated.height())
        self.rayo()
        return

    def rayo(self):
        rot = 2
        if (self.rotationVar < 90):
            self.roty += rot
            self.movimiento(self.rotX, self.roty, 1, 1)
        elif (self.rotationVar > 90 and self.rotationVar < 180):
            self.rotX -= rot
            self.movimiento(self.rotX, self.roty, -1, 1)
        elif (self.rotationVar > 180 and self.rotationVar < 270):
            self.roty -= rot
            self.movimiento(self.rotX, self.roty, -1, -1)
        elif (self.rotationVar > 270 and self.rotationVar < 360):
            self.rotX += rot
            self.movimiento(self.rotX, self.roty, 1, -1)
        elif (self.rotationVar == 90):
            self.rotX -= rot
            self.movimiento(self.rotX, self.roty, 0, 1)
        elif (self.rotationVar == 180):
            self.roty -= rot
            self.movimiento(self.rotX, self.roty, -1, 0)
        elif (self.rotationVar == 270):
            self.rotX += rot
            self.movimiento(self.rotX, self.roty, 0, -1)
        elif (self.rotationVar == 0):
            self.rotX = self.label.x() + 30
            self.roty = self.label.y() + 13
            self.movimiento(self.rotX, self.roty, 1, 0)

    def movimiento(self, x, y, movx, movy):

        while (True):
            if [x + 1, y] in self.MurosCoords:
                self.principal(x, y)
                return

            elif [x - 1, y] in self.MurosCoords:
                self.principal(x, y)
                return

            elif [x, y + 1] in self.MurosCoords:
                self.principal(x, y)
                return

            elif [x, y - 1] in self.MurosCoords:
                self.principal(x, y)
                return

            elif x == 0 or x == self.lbl.width() - 1 or y == 0 or y == self.lbl.height() - 1:
                self.principal(x, y)
                return
            else:
                x += movx
                y += movy
                self.drawPoints(QPainter(self.lbl.pixmap()), x, y) #Rayos

    def principal(self, x, y):
        qp = QPainter(self.lbl.pixmap())
        qp.setRenderHint(QtGui.QPainter.Antialiasing)
        qp.setPen(Qt.white)
        energia = self.energiaInicial

        if [x, y - 1] in self.MurosCoords or (y == 0):
            energia -= self.distanciaPuntos(QPoint(self.rotX, self.roty), QPoint(x, y))
            print('Arriba', x, y, energia)
            self.rayosTotales += 1
            self.drawPoints2(qp, x, y)
            for angle in self.rangodeAngulo(0):
                # hilo = Thread.ThreadSecundario(QPoint(x, y), qp, angle, energia)
                # hilo.sec_values.connect(self.secundarios)
                # hilo.start()
                self.secundarios(QPoint(x, y), qp, angle, energia)

        elif [x, y + 1] in self.MurosCoords or y == self.lbl.height()-1:
            energia -= self.distanciaPuntos(QPoint(self.rotX, self.roty), QPoint(x, y))
            print('Abajo', x, y, energia)
            self.rayosTotales += 1
            self.drawPoints2(qp, x, y)
            for angle in self.rangodeAngulo(1):
                # hilo = Thread.ThreadSecundario(QPoint(x, y), qp, angle, energia)
                # hilo.sec_values.connect(self.secundarios)
                # hilo.start()
                self.secundarios(QPoint(x, y), qp, angle, energia)

        elif [x - 1, y] in self.MurosCoords or (x == 0):
            energia -= self.distanciaPuntos(QPoint(self.rotX, self.roty), QPoint(x, y))
            print('Izquierda', x, y, energia)
            self.rayosTotales += 1
            self.drawPoints2(qp, x, y)
            for angle in self.rangodeAngulo(2):
                # hilo = Thread.ThreadSecundario(QPoint(x, y), qp, angle, energia)
                # hilo.sec_values.connect(self.secundarios)
                # hilo.start()
                self.secundarios(QPoint(x, y), qp, angle, energia)

        elif [x + 1, y] in self.MurosCoords or x == self.lbl.width()-1:
            energia -= self.distanciaPuntos(QPoint(self.rotX, self.roty), QPoint(x, y))
            print('Derecha', x, y, energia)
            self.rayosTotales += 1
            self.drawPoints2(qp, x, y)
            for angle in self.rangodeAngulo(3):
                # self.hilo = Thread.ThreadSecundario(QPoint(x, y), qp, angle, energia)
                # self.hilo.sec_values.connect(self.secundarios)
                # self.hilo.start()
                self.secundarios(QPoint(x, y), qp, angle, energia)

    def secundarios(self, p1, qp, angle, energia):
        p2 = QPoint(250, 250)
        length = 0
        loop = True
        energiaTmp = energia

        if energia < 5:
            return

        while loop:
            if p2.x == 0 or p2.y == 0 or p2.x == self.lbl.width()-1 or p2.y == self.lbl.height()-1:

                energia -= self.distanciaPuntos(QPoint(p1.x(), p1.y()), QPoint(p2.x, p2.y))
                if energia == energiaTmp or energia < 1:
                    return
                else:
                    print('Rebote: ', 'x->', p2.x, 'y->', p2.y, 'Energia->', int(energia))
                    self.rayosTotales += 1
                    qp.drawLine(p1.x(), p1.y(), p2.x, p2.y) #Rayos
                    if energia >= 5:
                        energiaTmp = energia
                        for angle in self.calcularAngulo(p2.x, p2.y):
                            self.secundarios(QPoint(p2.x, p2.y), qp, angle, energia)
                        return
                    else:
                        return
            else:
                if energia >= 5:
                    p2.x = int(round(p1.x() + length * math.cos(angle * 3.14 / 180.0)))
                    p2.y = int(round(p1.x() + length * math.sin(angle * 3.14 / 180.0)))
                    length += 1
                else:
                    return

            if [p2.x, p2.y-1] in self.MurosCoords or [p2.x, p2.y+1] in self.MurosCoords or \
                    [p2.x + 1, p2.y] in self.MurosCoords or [p2.x+1, p2.y] in self.MurosCoords:

                energia -= self.distanciaPuntos(QPoint(p1.x(), p1.y()), QPoint(p2.x, p2.y))
                if energia == energiaTmp or energia < 1:
                    return
                else:
                    print('Rebote: ', 'x->', p2.x, 'y->', p2.y, 'Energia->', int(energia))
                    self.rayosTotales += 1
                    qp.drawLine(p1.x(), p1.y(), p2.x, p2.y) #Rayos
                    self.drawPoints2(qp, p2.x, p2.y)
                    if energia >= 5:
                        energiaTmp = energia
                        for angle in self.calcularAngulo(p2.x, p2.y):
                            self.secundarios(QPoint(p2.x, p2.y), qp, angle, energia)
                        return
                    else:
                        return

            elif p2.x < 0 or p2.y < 0 or p2.x > self.lbl.width()-1 or p2.y > self.lbl.height()-1:
                return

            else:
                if energia >= 5:
                    p2.x = int(round(p1.x() + length * math.cos(angle * 3.14 / 180.0)))
                    p2.y = int(round(p1.x() + length * math.sin(angle * 3.14 / 180.0)))
                    length += 1
                else:
                    return


    def distanciaPuntos(self, p1, p2):
        distancia = math.sqrt(abs( ((p2.x()-p1.x())*(p2.x()-p1.x())) + ((p2.y()-p1.y())*(p2.y()-p1.y())) ))
        return distancia

    # Orientacion de los rayos secundarios
    def calcularAngulo(self, x, y):
        if [x, y - 1] in self.MurosCoords or (y == 0):
            return self.rangodeAngulo(0) #Arriba
        elif [x, y + 1] in self.MurosCoords or y >= self.lbl.height() - 1:
            return self.rangodeAngulo(1) #Abajo
        elif [x - 1, y] in self.MurosCoords or (x == 0):
            return self.rangodeAngulo(2) #Izquierda
        elif [x + 1, y] in self.MurosCoords or x >= self.lbl.width() - 1:
            return self.rangodeAngulo(3) #Derecha

    # Rango de ángulos para los rayos secundarios
    def rangodeAngulo(self, lado):
        anguloRayos = []
        angAux = int((self.rangoAngulo[lado])[1] / self.rayosSec)

        for i in range(self.rayosSec):
            angAux1 = (angAux * i) + (self.rangoAngulo[lado])[0]
            angAux2 = (angAux * (i + 1)) + (self.rangoAngulo[lado])[0]
            angle = random.randint(angAux1, angAux2)
            anguloRayos.append(angle)
            # print(angle, ' - ', angAux1, angAux2)
        return anguloRayos

    # Guarda las coordenadas de los pixeles de los objetos en self.MurosCoords
    def coordenadaMuro(self, lbl):
        pixmap = QPixmap(lbl.width(), lbl.height())
        lbl.render(pixmap)
        image = pixmap.toImage()
        val = lbl.pos()

        for i in range(lbl.width()):
            for j in range(lbl.height()):
                if image.pixelColor(i, j) == self.color:
                    self.MurosCoords.append([val.x() + i, val.y() + j])
                    self.MurosCoords.append([val.x() + i+1, val.y() + j])
                    # qp = QPainter(self.lbl.pixmap())
                    # self.drawMuros(qp, val.x() + i, val.y() + j)

    def drawPoints(self, qp, x, y):
        pen = QtGui.QPen()
        qp.setPen(QPen(Qt.yellow, 1))

        point = qp.drawPoint(x, y)
        self.MainWindow.update()
        return point

    def drawPoints2(self, qp, x, y):
        pen = QtGui.QPen()
        qp.setPen(QPen(Qt.white, 1))

        point = qp.drawPoint(x, y)
        self.MainWindow.update()
        return point

    def drawPoints3(self, qp, x, y):
        pen = QtGui.QPen()
        qp.setPen(QPen(Qt.red, 3))

        point = qp.drawPoint(x, y)
        self.MainWindow.update()
        return point

    def drawMuros(self, qp, x, y):
            pen = QtGui.QPen()
            qp.setPen(QPen(Qt.blue, 2))
            qp.drawPoint(x, y)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ui = Ui_MainWindow()
    sys.exit(app.exec_())